Elm.Common = Elm.Common || {};
Elm.Common.make = function (_elm) {
   "use strict";
   _elm.Common = _elm.Common || {};
   if (_elm.Common.values)
   return _elm.Common.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Common",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm);
   var roundPct = function (x) {
      return function () {
         var pct = $Basics.toString(x * 100.0);
         return A2($Basics._op["++"],
         A2($String.left,4,pct),
         "%");
      }();
   };
   var orElse = F2(function (res,
   x) {
      return $Maybe.withDefault(x)($Result.toMaybe(res));
   });
   var argsort = function (arr) {
      return function () {
         var idxs = $Array.toIndexedList(arr);
         return $List.map($Basics.fst)(A2($List.sortBy,
         $Basics.snd,
         idxs));
      }();
   };
   var argmax = function ($) {
      return $Maybe.withDefault(-1)($List.head($List.reverse(argsort($))));
   };
   var nth = F2(function (i,arr) {
      return $Maybe.withDefault(0.0)(A2($Array.get,
      i,
      arr));
   });
   var toList = function (x) {
      return function () {
         switch (x.ctor)
         {case "Just":
            return _L.fromArray([x._0]);
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 14 and 16");
      }();
   };
   var last = function (arr) {
      return A2($Array.get,
      $Array.length(arr) - 1,
      arr);
   };
   _elm.Common.values = {_op: _op
                        ,last: last
                        ,toList: toList
                        ,nth: nth
                        ,argsort: argsort
                        ,argmax: argmax
                        ,orElse: orElse
                        ,roundPct: roundPct};
   return _elm.Common.values;
};